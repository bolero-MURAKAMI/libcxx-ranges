// -*- C++ -*-

#ifndef _LIBCPP_RANGES
#define _LIBCPP_RANGES

#include <__config>
#include <type_traits>
#include <cstddef>
#include <iosfwd>
#include <iterator>
#if __APPLE__
#include <Availability.h>
#endif

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#pragma GCC system_header
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

struct _LIBCPP_VISIBLE input_range_tag {};
struct _LIBCPP_VISIBLE output_range_tag {};
struct _LIBCPP_VISIBLE forward_range_tag       : public input_range_tag {};
struct _LIBCPP_VISIBLE bidirectional_range_tag : public forward_range_tag {};
struct _LIBCPP_VISIBLE random_access_range_tag : public bidirectional_range_tag {};

template <class _Tp>
struct __has_range_category
{
private:
    struct __two {char __lx; char __lxx;};
    template <class _Up> static __two __test(...);
    template <class _Up> static char __test(typename _Up::range_category* = 0);
public:
    static const bool value = sizeof(__test<_Tp>(0)) == 1;
};

template <class _Range, bool> struct ____range_traits {};

template <class _Range>
struct ____range_traits<_Range, true>
{
    typedef typename _Range::length_type       length_type;
    typedef typename _Range::value_type        value_type;
    typedef typename _Range::reference         reference;
    typedef typename _Range::before_type       before_type;
    typedef typename _Range::after_type        after_type;
    typedef typename _Range::range_category    range_category;
};

template <class _Range, bool> struct __range_traits {};

template <class _Range>
struct __range_traits<_Range, true>
    :  ____range_traits
      <
        _Range,
        is_convertible<typename _Range::range_category, input_range_tag>::value ||
        is_convertible<typename _Range::range_category, output_range_tag>::value
      >
{};

// range_traits<Range> will only have the nested types if Range::range_category
//    exists.  Else range_traits<Range> will be an empty class.  This is a
//    conforming extension which allows some programs to compile and behave as
//    the client expects instead of failing at compile time.

template <class _Iter>
struct _LIBCPP_VISIBLE range_traits
    : __range_traits<_Iter, __has_range_category<_Iter>::value> {};

template <class _Tp, class _Up, bool = __has_range_category<range_traits<_Tp> >::value>
struct __has_range_category_convertible_to
    : public integral_constant<bool, is_convertible<typename range_traits<_Tp>::range_category, _Up>::value>
{};

template <class _Tp, class _Up>
struct __has_range_category_convertible_to<_Tp, _Up, false> : public false_type {};

template <class _Tp>
struct __is_input_range : public __has_range_category_convertible_to<_Tp, input_range_tag> {};

template <class _Tp>
struct __is_forward_range : public __has_range_category_convertible_to<_Tp, forward_range_tag> {};

template <class _Tp>
struct __is_bidirectional_range : public __has_range_category_convertible_to<_Tp, bidirectional_range_tag> {};

template <class _Tp>
struct __is_random_access_range : public __has_range_category_convertible_to<_Tp, random_access_range_tag> {};

template<class _Category, class _Before, class _After, class _Tp, class _Length = ptrdiff_t, class _Reference = _Tp&>
struct _LIBCPP_VISIBLE range
{
    typedef _Tp        value_type;
    typedef _Length    length_type;
    typedef _Reference reference;
    typedef _Before    before_type;
    typedef _After     after_type;
    typedef _Category  range_category;
};

template<class _iter> struct __range_to_iter_category;

template<>
struct __range_to_iter_category<output_iterator_tag> {typedef output_range_tag type;};
template<>
struct __range_to_iter_category<input_iterator_tag> {typedef input_range_tag type;};
template<>
struct __range_to_iter_category<forward_iterator_tag> {typedef forward_range_tag type;};
template<>
struct __range_to_iter_category<bidirectional_iterator_tag> {typedef bidirectional_range_tag type;};
template<>
struct __range_to_iter_category<random_access_iterator_tag> {typedef random_access_range_tag type;};

template <class _Iter>
class _LIBCPP_VISIBLE iter_range
    : public range<typename __range_to_iter_category<
		       typename iterator_traits<_Iter>::iterator_category
		   >::type,
		   iter_range<_Iter>, iter_range<_Iter>,
		   typename iterator_traits<_Iter>::value_type,
		   typename iterator_traits<_Iter>::difference_type,
		   typename iterator_traits<_Iter>::reference>
{
private:
    _Iter __first;
    _Iter __last;
public:
    typedef _Iter                                            iterator_type;
    typedef typename iterator_traits<_Iter>::difference_type length_type;
    typedef typename iterator_traits<_Iter>::reference       reference;

    _LIBCPP_INLINE_VISIBILITY iter_range() {}
    _LIBCPP_INLINE_VISIBILITY explicit iter_range(_Iter __f, _Iter __l) : __first(__f), __last(__l) {}
    template <class _Up> _LIBCPP_INLINE_VISIBILITY iter_range(const iter_range<_Up>& __u) : __first(__u.begin()), __last(__u.end()) {}
    _LIBCPP_INLINE_VISIBILITY bool empty() const {return __first==__last;}
    // begin and end are not part of the range interface and are specific to iter_range
    _LIBCPP_INLINE_VISIBILITY _Iter begin() const {return __first;}
    _LIBCPP_INLINE_VISIBILITY _Iter end() const {return __last;}
    _LIBCPP_INLINE_VISIBILITY reference front() const {return *__first;}
    _LIBCPP_INLINE_VISIBILITY void pop_front() {++__first;}
    _LIBCPP_INLINE_VISIBILITY reference back() const {_Iter __tmp = __last; return *--__tmp;}
    _LIBCPP_INLINE_VISIBILITY void pop_back() {--__last;}
    _LIBCPP_INLINE_VISIBILITY length_type length() const {return __last - __first;}
    _LIBCPP_INLINE_VISIBILITY iter_range operator+(length_type __n) const {return iter_range(__first+__n, __last);}
    _LIBCPP_INLINE_VISIBILITY iter_range& operator+=(length_type __n) {__first += __n; return *this;}
    _LIBCPP_INLINE_VISIBILITY iter_range operator-(length_type __n) const {return iter_range(__first, __last - __n);}
    _LIBCPP_INLINE_VISIBILITY iter_range& operator-=(length_type __n) {__last -= __n; return *this;}
    _LIBCPP_INLINE_VISIBILITY reference operator[](length_type __n) const {return __first[__n];}
    _LIBCPP_INLINE_VISIBILITY iter_range before(const iter_range& __r) const {return iter_range(__first, __r.__first);}
    _LIBCPP_INLINE_VISIBILITY iter_range before_including(const iter_range& __r) const {return iter_range(__first, __r.__last);}
    _LIBCPP_INLINE_VISIBILITY iter_range after(const iter_range& __r) const {return iter_range(__r.__last, __last);}
    _LIBCPP_INLINE_VISIBILITY iter_range after_including(const iter_range& __r) const {return iter_range(__r.__first, __last);}

    _LIBCPP_INLINE_VISIBILITY bool operator==(const iter_range& __r) const {return __r.__first == __first && __r.__last == __last;}
};

template <class _Iter>
inline _LIBCPP_INLINE_VISIBILITY
iter_range<_Iter> make_iter_range(_Iter __first, _Iter __last) {return iter_range<_Iter>(__first, __last);}

// This is an unbounded forward range.  That is, it can only be traversed by pop_front() and related methods.
// All the methods modifying the end of the range are provided right now, but they should not be used.  Perhaps they should throw an exception.
template <class _Iter>
class _LIBCPP_VISIBLE single_iter_range
    : public range<typename __range_to_iter_category<
		       typename iterator_traits<_Iter>::iterator_category
		   >::type,
		   iter_range<_Iter>, iter_range<_Iter>,
		   typename iterator_traits<_Iter>::value_type,
		   typename iterator_traits<_Iter>::difference_type,
		   typename iterator_traits<_Iter>::reference>
{
private:
    _Iter __iter;
public:
    typedef _Iter                                            iterator_type;
    typedef typename iterator_traits<_Iter>::difference_type length_type;
    typedef typename iterator_traits<_Iter>::reference       reference;

    _LIBCPP_INLINE_VISIBILITY single_iter_range() {}
    _LIBCPP_INLINE_VISIBILITY explicit single_iter_range(_Iter __i) : __iter(__i) {}
    template <class _Up> _LIBCPP_INLINE_VISIBILITY single_iter_range(const single_iter_range<_Up>& __u) : __iter(__u.base()) {}
    _LIBCPP_INLINE_VISIBILITY bool empty() const {return false;}
    _LIBCPP_INLINE_VISIBILITY _Iter base() const {return __iter;}
    _LIBCPP_INLINE_VISIBILITY reference front() const {return *__iter;}
    _LIBCPP_INLINE_VISIBILITY void pop_front() {return ++__iter;}
    _LIBCPP_INLINE_VISIBILITY reference back() const {return *__iter;}
    _LIBCPP_INLINE_VISIBILITY void pop_back() {return --__iter;}
    _LIBCPP_INLINE_VISIBILITY single_iter_range operator+(length_type __n) const {return single_iter_range(__iter+__n);}
    _LIBCPP_INLINE_VISIBILITY single_iter_range& operator+=(length_type __n) {__iter += __n; return *this;}
    _LIBCPP_INLINE_VISIBILITY single_iter_range operator-(length_type __n) const {return single_iter_range(__iter - __n);}
    _LIBCPP_INLINE_VISIBILITY single_iter_range& operator-=(length_type __n) {__iter -= __n; return *this;}
    _LIBCPP_INLINE_VISIBILITY reference operator[](length_type __n) const {return __iter[__n];}
    _LIBCPP_INLINE_VISIBILITY iter_range<_Iter> before(const single_iter_range& __r) const {return iter_range<_Iter>(__iter, __r.__iter);}
    _LIBCPP_INLINE_VISIBILITY single_iter_range before_including(const single_iter_range& __r) const {return single_iter_range(__iter);}
    _LIBCPP_INLINE_VISIBILITY iter_range<_Iter> after(const single_iter_range& __r) const {return iter_range<_Iter>(_Iter(), _Iter());}
    _LIBCPP_INLINE_VISIBILITY single_iter_range after_including(const single_iter_range& __r) const {return single_iter_range(__r.__iter);}

    _LIBCPP_INLINE_VISIBILITY bool operator==(const single_iter_range& __r) const {return __r.__iter == __iter;}
};

template <class _Iter>
inline _LIBCPP_INLINE_VISIBILITY
single_iter_range<_Iter> make_single_iter_range(_Iter __iter) {return single_iter_range<_Iter>(__iter);}

// This is an unbounded backward range.  That is, it can only be traversed by pop_back() and related methods.
// All the methods modifying the front of the range are provided right now, but they should not be used.  Perhaps they should throw an exception.
template <class _Iter>
class _LIBCPP_VISIBLE single_iter_backward_range
    : public range<typename __range_to_iter_category<
		       typename iterator_traits<_Iter>::iterator_category
		   >::type,
		   iter_range<_Iter>, iter_range<_Iter>,
		   typename iterator_traits<_Iter>::value_type,
		   typename iterator_traits<_Iter>::difference_type,
		   typename iterator_traits<_Iter>::reference>
{
private:
    _Iter __iter;
public:
    typedef _Iter                                            iterator_type;
    typedef typename iterator_traits<_Iter>::difference_type length_type;
    typedef typename iterator_traits<_Iter>::reference       reference;

    _LIBCPP_INLINE_VISIBILITY single_iter_backward_range() {}
    _LIBCPP_INLINE_VISIBILITY explicit single_iter_backward_range(_Iter __i) : __iter(__i) {}
    template <class _Up> _LIBCPP_INLINE_VISIBILITY single_iter_backward_range(const single_iter_backward_range<_Up>& __u) : __iter(__u.base()) {}
    _LIBCPP_INLINE_VISIBILITY bool empty() const {return false;}
    _LIBCPP_INLINE_VISIBILITY _Iter base() const {return __iter;}
    _LIBCPP_INLINE_VISIBILITY reference front() const {return *__iter;}
    _LIBCPP_INLINE_VISIBILITY void pop_front() {return ++__iter;}
    _LIBCPP_INLINE_VISIBILITY reference back() const {return *__iter;}
    _LIBCPP_INLINE_VISIBILITY void pop_back() {return --__iter;}
    _LIBCPP_INLINE_VISIBILITY single_iter_backward_range operator+(length_type __n) const {return single_iter_backward_range(__iter+__n);}
    _LIBCPP_INLINE_VISIBILITY single_iter_backward_range& operator+=(length_type __n) {__iter += __n; return *this;}
    _LIBCPP_INLINE_VISIBILITY single_iter_backward_range operator-(length_type __n) const {return single_iter_backward_range(__iter - __n);}
    _LIBCPP_INLINE_VISIBILITY single_iter_backward_range& operator-=(length_type __n) {__iter -= __n; return *this;}
    _LIBCPP_INLINE_VISIBILITY reference operator[](length_type __n) const {return __iter[__n];}
    _LIBCPP_INLINE_VISIBILITY iter_range<_Iter> before(const single_iter_backward_range& __r) const {return iter_range<_Iter>(_Iter(), _Iter());}
    _LIBCPP_INLINE_VISIBILITY single_iter_backward_range before_including(const single_iter_backward_range& __r) const {return single_iter_backward_range(__r.__iter);}
    _LIBCPP_INLINE_VISIBILITY iter_range<_Iter> after(const single_iter_backward_range& __r) const {_Iter tmp_this = __iter; _Iter tmp_r = __r.iter; return iter_range<_Iter>(++tmp_r, ++tmp_this);}
    _LIBCPP_INLINE_VISIBILITY single_iter_backward_range after_including(const single_iter_backward_range& __r) const {return single_iter_backward_range(__iter);}

    _LIBCPP_INLINE_VISIBILITY bool operator==(const single_iter_backward_range& __r) const {return __r.__iter == __iter;}
};

template <class _Iter>
inline _LIBCPP_INLINE_VISIBILITY
single_iter_backward_range<_Iter> make_single_iter_backward_range(_Iter __iter) {return single_iter_backward_range<_Iter>(__iter);}
    
template <class _InputRange>
inline _LIBCPP_INLINE_VISIBILITY
void __advance(_InputRange& __r,
             typename range_traits<_InputRange>::length_type __n, input_range_tag)
{
    for (; __n > 0; --__n)
        __r.pop_front();
}

template <class _BiDirRange>
inline _LIBCPP_INLINE_VISIBILITY
void __advance(_BiDirRange& __r,
             typename range_traits<_BiDirRange>::length_type __n, bidirectional_range_tag)
{
    if (__n >= 0)
        for (; __n > 0; --__n)
            __r.pop_front();
    else
        for (; __n < 0; ++__n)
            __r.pop_back();
}

template <class _RandRange>
inline _LIBCPP_INLINE_VISIBILITY
void __advance(_RandRange& __r,
             typename range_traits<_RandRange>::length_type __n, random_access_range_tag)
{
   __r += __n;
}

template <class _InputRange>
inline _LIBCPP_INLINE_VISIBILITY
void advance(_InputRange& __r,
             typename range_traits<_InputRange>::length_type __n)
{
    __advance(__r, __n, typename range_traits<_InputRange>::range_category());
}

template <class _InputRange>
inline _LIBCPP_INLINE_VISIBILITY
typename range_traits<_InputRange>::length_type
__distance(_InputRange __r, input_range_tag)
{
    typename range_traits<_InputRange>::length_type __c(0);
    for (; !__r.empty(); __r.pop_front())
        ++__c;
    return __c;
}

template <class _RandRange>
inline _LIBCPP_INLINE_VISIBILITY
typename range_traits<_RandRange>::length_type
__distance(_RandRange __r, random_access_range_tag)
{
    return __r.length();
}

template <class _InputRange>
inline _LIBCPP_INLINE_VISIBILITY
typename range_traits<_InputRange>::length_type
distance(_InputRange __r)
{
    return __distance(__r, typename range_traits<_InputRange>::range_category());
}

template <class _ForwardRange>
inline _LIBCPP_INLINE_VISIBILITY
_ForwardRange
next(_ForwardRange __x,
     typename range_traits<_ForwardRange>::length_type __n = 1,
     typename enable_if<__is_forward_range<_ForwardRange>::value>::type* = 0)
{
    _VSTD::advance(__x, __n);
    return __x;
}

template <class _BidiretionalRange>
inline _LIBCPP_INLINE_VISIBILITY
_BidiretionalRange
prev(_BidiretionalRange __x,
     typename range_traits<_BidiretionalRange>::length_type __n = 1,
     typename enable_if<__is_bidirectional_range<_BidiretionalRange>::value>::type* = 0)
{
    _VSTD::advance(__x, -__n);
    return __x;
}
    
// more to come 

_LIBCPP_END_NAMESPACE_STD

#endif // _LIBCPP_RANGES

// Local Variables:
// c-basic-offset: 4
// End:
