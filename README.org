* Introduction

The C++ Standardization Committee has tasked Study Group 9 (SG9) with researching the idea of using ranges instead or in addition to iterators.[fn:1]  This is an attempt to (re)implement the STL with ranges instead of iterators.  The purpose of this implementation is only to get the discussion going, either in the negative (rejecting ranges) or the positive (further discussion of ranges).  The implementation is purposefully as close to the original[fn:2] as possible.  This closeness allows one to directly compare the implementation of STL with ranges against an implementation with iterators.  Sometimes, this direct approach may result in implementations that are suboptimal for ranges, but this is a topic for a further discussion.

The implementation is unfinished at the moment, but it covers a sizable chunk of STL.  The status of the implementation is discussed in more detail [[sec:status][later on]] in this document.  This README file provides a very rudimentary discussion of the implementation that will hopefully be expanded by SG9.

* Ranges

A big question that SG9 has to answer is why ranges?  That is, what problem do ranges solve?  This implementation will hopefully help to investigate that problem.  Next, we discuss the differences and similarities between ranges and iterators.

** Ranges "vs." Iterators

Iterators are a generalization of pointers, allowing abstract algorithms without performance penalty oven algorithms actually implemented with pointers.  However, virtually all algorithms in STL operate on and return *ranges*.  Ranges can be kept as pairs of iterators or as a single iterator with some implicit knowledge on how many times can the iterator be advanced (bounded vs. counted ranges).  Even when an algorithm (such as say find) returns a "position" in a range as a single iterator, this iterator is not independent, and it forms two bounded ranges with the original "first" and "last" iterators.  Thus, there is no way of escaping ranges, even with the "position" iterators returned by some algorithms.

Iterators allow direct manipulation of the details of ranges.  For example, two ranges can share iterators: =[first, last1)= and =[first, last2)= are two different ranges, but a smart programmer can "optimize" by sharing the first iterator.  With ranges as primitives, such sharing is probably not possible without some support from the compiler or without greatly complicating the interface of ranges.

One of the basic objections against ranges is that they cannot represent "positions."  In this implementation, we contribute a possible remedy to this problem: subrange operations.  It is important to note that "position" iterators are usually used to form new ranges.  For example, given a call =auto result = find(first, last, 2)= creates two new ranges, =[first, result)= and =[result,last)=.  Without subrange operations, one may have to implement two different versions of find, each returning one of these ranges.  Subrange operations, on the other hand, allow one natural implementation that returns the "remainder" range representing =[result,last)= and extracting the "skipped" range with =r.before(result)= where =r= is the range searched.  Subrange operations make the concept of ranges a bit more "dangerous" as the programmer must know of the subrange relation between ranges.  Subrange operations on ranges that are not related by a subrange relation are erroneous and may lead to unexpected results.

** Range Concepts

Ranges are structured after the STL iterators as in current standard into output, input, forward, bidirectional, and random access ranges.  Range concepts are "implemented" for testing in the [[https://github.com/marcinz/libcxx-ranges/blob/master/test/support/test_ranges.h][test_ranges.h]] file.  Currently, we do not give a detailed description of ranges (only due to time constraints).  Here we discuss only a few interesting differences between ranges and iterators.

The input range provides two strange operations, =front_equal= and =back_equal=.  Currently, only =front_equal= is used and only in the implementation of =sort=.  These operations compare the front and the back of the range, corresponding to comparing =first= or =last= iterators of iterator ranges.  They can be implemented with subrange operations, but directly comparing back and front only seemed more efficient.

All ranges forward and up provide subrange operations =before=, =before_including=, =after=, and =after_including=.  The argument to these operations must be a subrange of the range on which the operation is performed.  The subrange relation cannot be checked via any operations, and must be known from the preconditions of the algorithm.  For example, if a range is only "popped" with =pop_front=, it is a subrange of the original range.  The =after_type= and =before_type= types must be the same as the original range for bounded ranges, but can be different for infinite ranges.  This is necessary because a subrange operation on unbounded ranges may result in a bounded range, changing the implementation details.  This is an interesting point for discussion: iterators expose "implementation details" of ranges allowing performing subrange operations by hand while ranges hide implementation details and require explicit subrange operations that must account for changing details in varying return types.  The changing return type can also be seen in the [[http://dlang.org/phobos/std_range.html#hasSlicing][D Phobos library]] for slicing.  While Phobos does not provide subrange operations, the reason for varying type in slicing is similar.

For random access ranges, we implement slicing with =+= and =-= operators, which pop from the front and from the back of the range, respectively.  So, to take of 3 elements from the front and 2 from the back of a range =r= one would write =r+3-2=.  There is no reason why slicing could not be implemented through a different interface, and the current interface is only a first try. 

* Issues

The main issue with ranges that we observed until now is optimization.  Ranges do not allow for sharing between different ranges as is possible with iterators.  Furthermore, some operations may do more than is necessary.  One example are the =front_equal= and =back_equal= operations we discussed before.  

* Status
#+LABEL: sec:status

Range algorithms are implemented in the ~include/algorithms-range~ file.  Currently, the only ranges we implemented are iterator wrapper ranges implemented in the ~include/range~ file.  

The implementation is highly experimental.  Not all of the STL algorithms are translated, but a big chunk is.  The implementations were directly translated from their iterator versions, and no thought was put into making them more palatable and perhaps more optimal with ranges.

All the translated algorithms are tested, and the tests can give an idea on how to use the algorithms.  Studying of the algorithms themselves vs. the iterator counterparts gives a good idea on how to use ranges.

Further hints on what can be done with ranges can be taken from the [[http://dlang.org/phobos/][D Phobos Library]], but until now we only directly translated the iterator-based STL without attempting to extend it.

* Footnotes

Note: Footnotes do not render properly on GitHub.

[fn:1] http://www.open-std.org/pipermail/ranges/2013-January/000009.html

[fn:2] "libc++" C++ Standard Library at http://libcxx.llvm.org/
